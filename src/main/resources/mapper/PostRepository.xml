<?xml version="1.0" encoding="UTF-8"?>      <!-- 상단에는 xml 규격이 들어가야함 -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace : interface 연결 -->
<mapper namespace="com.lec.spring.repository.PostRepository">

    <insert id="save" flushCache="true" parameterType="com.lec.spring.domain.Post" useGeneratedKeys="true" keyColumn="id" keyProperty="id">        <!-- id 값에 insert 부분의 메소드 이름 -->

        INSERT INTO t5_post
            (subject, content, user_id)
        VALUES
        (#{subject}, #{content}, #{user.id})        <!-- #{} : post의 getXXX 값-->
    </insert>

<!--    id 값은 메소드 이름 -->
    <update id="incViewCnt" flushCache="true">
        UPDATE t5_post
        <!--/*매개변수로 받은 id 값이 id 과 일치할 경우 viewcnt 1 증가*/-->
        SET viewcnt = viewcnt + 1
                <!--/*⬇️ 이름 그대로 parameter 값 넣을 수 있음 (wrapper 타입인 경우)*/-->
        WHERE id = #{id}
    </update>

    <!-- 반복해서 사용될 쿼리문은 sql 태그로 정의 하고, include 태그로 가져다 쓸 수 있다 -->
    <sql id="SELECT_BASE">
        SELECT
            p.id "p_id",
            p.subject "p_subject",
            p.content "p_content",
            p.viewcnt "p_viewcnt",
            p.regdate "p_regDate",
            u.id "u_id",
            u.username "u_username",
            u.name "u_name",
            u.email "u_email",
            u.regdate "u_regdate"
        FROM
            t5_post p, t5_user u
        WHERE
            p.user_id = u.id
    </sql>

    <!-- JOIN 문에서 여러 테이블의 데이터를 매핑 받기 -->
    <resultMap id="mapUser" type="com.lec.spring.domain.User">
        <result column="u_id" property="id"/>       <!--u_id 컬럼을 User(u) 객체의 id 프로퍼티로 꽂아 넣는다. -->
        <result column="u_username" property="username"/>
        <result column="u_password" property="password"/>   <!--u_password 가 없지만 없어도 에러는 안 뜨지만 null 뜸-->
        <result column="u_name" property="name"/>
        <result column="u_email" property="email"/>
        <result column="u_regdate" property="regDate"/>
    </resultMap>

    <resultMap id="mapPost" type="com.lec.spring.domain.Post">  <!-- PostRepository.java 에서 List<Post>의 Post 객체로 변환해주는 과정-->
        <result column="p_id" property="id"/>       <!-- select한 p_id 를 Post(p) 객체의 id에 꽂아넣는다. -->
        <result column="p_subject" property="subject"/>
        <result column="p_content" property="content"/>
        <result column="p_viewcnt" property="viewCnt"/>
        <result column="p_regdate" property="regDate"/>
        <collection property="user" resultMap="mapUser"/>   <!-- Post class 의 user property 의 결과는 mapUser-->
    </resultMap>

    <select id="findAll" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
    </select>

    <select id="findById" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        AND p.id = #{id}
    </select>

    <update id="update" flushCache="true"
            parameterType="com.lec.spring.domain.Post">
        UPDATE t5_post
        <!--/* #{subject} => Post.java 안에 있는 setterSubject 입력 값을 받아와서 subject 에 저장 */-->
        SET subject=#{subject}, content=#{content}
        WHERE id=#{id}
    </update>

    <delete id="delete" flushCache="true"
            parameterType="com.lec.spring.domain.Post">
        DELETE FROM t5_post WHERE id = #{id}
    </delete>

    <!-- 페이징 용 쿼리-->
    <select id="selectFromRow" resultMap="mapPost">
        <include refid="SELECT_BASE"/>
        ORDER BY p.id DESC
        LIMIT #{param1}, #{param2}          <!-- 첫번째 parameter(int from) 이 param1, 두번째는 int row-->
    </select>

    <select id="countAll" resultType="int">
        SELECT count(*) FROM t5_post;
    </select>
</mapper>